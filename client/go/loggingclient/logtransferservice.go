// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package loggingclient

import (
	"bytes"
	"fmt"
	"git.corp.plu.cn/plugo/infrastructure/loggingclient/thrift"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type LogTransferService interface {
	// Parameters:
	//  - LogPackage
	Log(logPackage *TLogPackage) (err error)
}

type LogTransferServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewLogTransferServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogTransferServiceClient {
	return &LogTransferServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewLogTransferServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogTransferServiceClient {
	return &LogTransferServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - LogPackage
func (p *LogTransferServiceClient) Log(logPackage *TLogPackage) (err error) {
	if err = p.sendLog(logPackage); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.Log " + err.Error())
		return
	}
	return p.recvLog()
}

func (p *LogTransferServiceClient) sendLog(logPackage *TLogPackage) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Log", thrift.CALL, p.SeqId); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.sendLog " + err.Error())
		return
	}
	args := LogArgs{
		LogPackage: logPackage,
	}
	if err = args.Write(oprot); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.sendLog " + err.Error())
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.sendLog " + err.Error())
		return
	}
	return oprot.Flush()
}

func (p *LogTransferServiceClient) recvLog() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.recvLog " + err.Error())
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.recvLog " + err.Error())
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.recvLog " + err.Error())
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Log failed: out of sequence response")
		return
	}
	result := LogResult{}
	if err = result.Read(iprot); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.recvLog " + err.Error())
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		fmt.Println(time.Now().String() + "：Error LogTransferServiceClient.recvLog " + err.Error())
		return
	}
	return
}

type LogTransferServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LogTransferService
}

func (p *LogTransferServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LogTransferServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LogTransferServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLogTransferServiceProcessor(handler LogTransferService) *LogTransferServiceProcessor {

	self8 := &LogTransferServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["Log"] = &logTransferServiceProcessorLog{handler: handler}
	return self8
}

func (p *LogTransferServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type logTransferServiceProcessorLog struct {
	handler LogTransferService
}

func (p *logTransferServiceProcessorLog) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LogArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LogResult{}
	var err2 error
	if err2 = p.handler.Log(args.LogPackage); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Log: "+err2.Error())
		oprot.WriteMessageBegin("Log", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("Log", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type LogArgs struct {
	LogPackage *TLogPackage `thrift:"logPackage,1" json:"logPackage"`
}

func NewLogArgs() *LogArgs {
	return &LogArgs{}
}

var LogArgs_LogPackage_DEFAULT *TLogPackage

func (p *LogArgs) GetLogPackage() *TLogPackage {
	if !p.IsSetLogPackage() {
		return LogArgs_LogPackage_DEFAULT
	}
	return p.LogPackage
}
func (p *LogArgs) IsSetLogPackage() bool {
	return p.LogPackage != nil
}

func (p *LogArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogArgs) ReadField1(iprot thrift.TProtocol) error {
	p.LogPackage = &TLogPackage{}
	if err := p.LogPackage.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LogPackage, err)
	}
	return nil
}

func (p *LogArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Log_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logPackage", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:logPackage: %s", p, err)
	}
	if err := p.LogPackage.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.LogPackage, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:logPackage: %s", p, err)
	}
	return err
}

func (p *LogArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogArgs(%+v)", *p)
}

type LogResult struct {
}

func NewLogResult() *LogResult {
	return &LogResult{}
}

func (p *LogResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LogResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Log_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *LogResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LogResult(%+v)", *p)
}
